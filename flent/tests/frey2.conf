## -*- mode: python; coding: utf-8 -*-

include("netperf_definitions.inc")

DESCRIPTION="UDP stress test with sparse and nonsparse flows"
DEFAULTS={'PLOT': 'paper2'}

STREAMS=get_test_parameter('streams', default=[], split=True, cast=str)

if len(STREAMS) == 0:
   raise RuntimeError("There must be at least one flow specificed!")

flow_count = 0
flows = []
for flow_parameter in STREAMS:
    test_parameter_args = flow_parameter.split(':')
    if len(test_parameter_args) != 3:
        raise RuntimeError("Sparse and nonsparse parameters are in the format n:n:n")

    burst_flow_count = int(test_parameter_args[0])
    burst_packet_count = int(test_parameter_args[1]) if int(test_parameter_args[1]) > 0 else ""
    burst_interval = int(test_parameter_args[2]) if int(test_parameter_args[2]) > 0 else ""

    for i in range(burst_flow_count):
        flows.append({'packet_count': burst_packet_count, 'interval': burst_interval})
        flow_count += 1

DATA_SETS = o([
    ('UDP upload avg',
     {'apply_to': [glob("UDP upload::*", exclude=["UDP upload sum",
                                                  "UDP upload packet per second"])],
      'units': 'Mbits/s',
      'runner': 'average',}),
    ('UDP upload sum',
     {'apply_to': [glob("UDP upload::*", exclude=["UDP upload avg",
                                                  "UDP upload packet per second"])],
      'units': 'Mbits/s',
      'runner': 'sum',}),
    ('Ping (ms) ICMP',
     {'ip_version': IP_VERSION, 'interval': STEP_SIZE, 'length': TOTAL_LENGTH,
      'host': HOST, 'units': 'ms', 'runner': 'ping'}),
])

def add_stream(i, marking='CS0', length=LENGTH, delay=DELAY, **kwargs):

    burst_packet_count = flows[i]['packet_count']
    burst_interval = flows[i]['interval']


    send_size = int(SEND_SIZE[min(len(SEND_SIZE) - 1, i)]) if len(SEND_SIZE) > 0 else 1
    multiplier = 10**6 / 8 / send_size

    DATA_SETS['UDP upload::%d' % (i+1)] = {'test': 'UDP_STREAM',
                                           'length': length,
                                           'burst_count': burst_packet_count,
                                           'burst_interval': burst_interval,
                                           'host': HOST,
                                           'marking': marking,
                                           'delay': delay,
                                           'id': str(i+1),
                                           'units': 'Mbits/s',
                                           'runner': 'netperf_demo'}


    DATA_SETS['UDP upload pktps::%d' % (i+1)] = {'apply_to': ['UDP upload::%d' % (i+1)],
      'multiplier': multiplier,
      'units': 'packets',
      'runner': 'converter',}


for_stream_config(add_stream, n=flow_count)

PLOTS = o([
    ('totals',
     {'description': 'Bandwidth and ping plot',
      'type': 'timeseries',
      'dual_axes': True,
      'series': [{'data': 'UDP upload sum',
                  'label': 'Upload'},
                 {'data': 'Ping (ms) ICMP',
                  'label': 'Ping (ms)',
                  'axis': 2}]}),
    ('upload',
     {'description': 'Upload bandwidth plot',
      'type': 'timeseries',
      'legend_title': 'UDP upload',
      'series': [{'data': glob('UDP upload::*'),
                  'label': 'BE'},
                 {'data': 'UDP upload avg',
                  'label': 'Avg',
                  'smoothing': 10,
                  'color': 'black',
                  'linewidth': 2}]}),
    ('upload_box',
     {'description': 'Upload box plot',
      'type': 'box',
      'series': [{'data': glob('UDP upload::*'),
                  'label': 'BE',
                  'cutoff': (DELAY,-DELAY)},
                 {'data': 'UDP upload avg',
                  'label': 'Avg',
                  'cutoff': (DELAY,-DELAY)}]}),
    ('upload_with_ping',
     {'description': 'Upload throughput and ping plot',
      'type': 'timeseries',
      'legend_title': 'UDP upload',
      'dual_axes': True,
      'series': [{'data': glob('UDP upload::*'),
                  'label': 'BE'},
                 {'data': glob('Ping (ms) *'),
                  'label': 'Ping (ms)',
                  'axis': 2}]}),
    ('upload_with_ping_and_udp_rtt',
     {'description': 'Upload throughput with ping and UDP RTT',
      'type': 'timeseries',
      'legend_title': 'UDP upload',
      'dual_axes': True,
      'axis_labels': [None, 'Latency (ms)'],
      'series': [{'data': glob('UDP upload::*'),
                  'label': 'BE'},
                 {'data': glob('Ping (ms) *'),
                  'label': 'Ping (ms)',
                  'axis': 2},
                 {'data': glob('UDP**', exclude=['*fairness*']),
                  'axis': 2,
                  'raw_key': 'udp_rtt',
                  'label': 'UDP RTT'}]}),
    ('udp_delivery_with_ping',
     {'description': 'UDP delivery rate with ping',
      'type': 'timeseries',
      'dual_axes': True,
      'series': [
          {'data': glob('UDP**', exclude=['*fairness*']),
           'raw_key': 'udp_delivery_rate',
           'label': 'Delivery rate'},
          {'data': glob('Ping (ms) *'),
           'label': 'Ping (ms)',
           'axis': 2}]}),
    ('udp_delivery_with_rtt',
     {'description': 'UDP delivery rate with ping and UDP RTT',
      'type': 'timeseries',
      'dual_axes': True,
      'axis_labels': [None, 'Latency (ms)'],
      'series': [
          {'data': glob('UDP**', exclude=['*fairness*']),
           'raw_key': 'udp_delivery_rate',
           'label': 'Delivery rate'},
          {'data': glob('Ping (ms) *'),
           'label': 'Ping (ms)',
           'axis': 2},
          {'data': glob('UDP**', exclude=['*fairness*']),
           'axis': 2,
           'raw_key': 'udp_rtt',
           'label': 'UDP RTT'}]}),
    ('upload_scaled',
     {'description': 'Upload bandwidth w/axes scaled to remove outliers',
      'parent': 'upload',
      'scaling': (5,95)}),
    ('ping',
     {'description': 'Ping plot',
      'type': 'timeseries',
      'axis_labels': ['Latency (ms)'],
      'series': [{'data': 'Ping (ms) ICMP',
                  'label': 'Ping (ms)'},]}),
    ('ping_smooth',
     {'description': 'Ping plot (inc smoothed average)',
      'type': 'timeseries',
      'legend_title': 'Ping (ms)',
      'axis_labels': ['Latency (ms)'],
      'series': [
                 {'data': 'Ping (ms) ICMP',
                  'label': 'Ping (ms)'},
                 {'data': 'Ping (ms) ICMP',
                  'label': 'Avg (smoothing)',
                  'smoothing': 5,
                  'color': 'black',
                  'linewidth': 2}]}),
    ('ping_cdf',
     {'description': 'Ping CDF plot',
      'type': 'cdf',
      'series': [{'data': 'Ping (ms) ICMP',
                  'label': 'Ping (ms)'},],
      'cutoff': (DELAY,-DELAY)}),
    ('box_totals',
     {'description': 'Box plot of totals',
      'parent': 'totals',
      'type': 'box',
      'cutoff': (DELAY,-DELAY)}),
    ('box_totals_combine',
     {'description': 'Combination box plot of totals',
      'parent': 'totals',
      'type': 'box_combine',
      'series': [{'data': 'UDP upload sum',
                  'label': 'Upload',
                  'combine_mode': 'mean'},
                 {'data': 'Ping (ms) ICMP',
                  'label': 'Ping (ms)',
                  'axis': 2}],
      'cutoff': (DELAY,-DELAY)}),
    ('box_ping_combine',
     {'description': 'Combination box plot of ping times',
      'parent': 'ping_cdf',
      'type': 'box_combine',}),
    ('box_combine',
     {'description': 'Upload bandwidth combination box plot',
      'series': [{'data': glob('UDP upload::*', exclude=["UDP upload avg", "UDP upload fairness", "UDP upload sum"]),
                  'label': 'Upload',
                  'combine_mode': 'mean'},
                 {'data': 'UDP upload avg',
                  'label': 'Avg',
                  'combine_mode': 'mean'}],
      'type': 'box_combine'}),

    ('bar_combine',
     {'description': 'Upload bandwidth combination bar plot',
      'parent': 'box_combine',
      'type': 'bar_combine'}),

    ('paper2',
     {'description': 'UDP upload with CPU core usage and ethtool stats',
      'type': 'meta',
      'subplots': ('upload_pkts', 'cpu_core', 'ethtool')}),

    ('upload_pkts',
     {'description': 'Upload pkts/s plot',
      'type': 'timeseries',
      'legend_title': 'UDP upload pkts/s',
      'series': [{'data': glob('UDP upload pktps::*'),
                  'label': 'BE'},
                 ]}),
    ])

include("common.inc")
